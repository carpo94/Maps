/* ***********************************************************
   Dynamic Table from Report System

   Adds funcionality on a table created by the Report System.
   - Sort by column.
   - Filter by column.
   - Suppress Repeating Values.
   - Total by column.
   - Paging.
   - Hide/Shows columns

   Ver. 1.0
Author: MAN
 ********************************************************** */

/*
   Column Info
 */
function DynGridCol() {
    this.Visible = true;
    this.Sort = false;
    this.SortDirection = -1; // 1 - Descendent; -1 - Ascendent;
    this.CompareFunction = null;
    this.Filter = false;
    this.Total = false;
    this.TotalAmmount = 0;
    this.SuppressRep = false;
}

/*
   Row Info
 */
function DynGridRow(rownumber) { 

    this.Filtered = false;
    this.Even = ((rownumber % 2) == 1);
}

DynGrid.prototype.autoStore = new Array();

DynGrid.prototype.FILTER_LABEL = "- - -";

DynGrid.prototype.SORT_TYPE = {
TEXT: 0,
DATE: 1,
NUMBER: 2
}

/*
   Builds a DynGrid object from an grid table generated by the report system 
   win - Document where table has been generated 
   language - Language (es, en , etc.) 
   name - Table Name 
   className - Style Class to use with the table (default = 'grid') 
 */
function DynGrid(win, language, name, className) {

    if (arguments.length) {
        this.autoStore.push (this);
        this.nAutoStore = this.autoStore.length - 1;
    }

    /* ******************************************
       METHODS
     ****************************************** */

    /*
       Gets the requiered info for the rows and columns from the generated table 
     */
    this.initializeRowsAndCols=function() {
        var _cells = null;
        var _i=0;

        _cells=this.tableDocument.rows[0].cells;
        this.nCols = _cells.length;
        for (_i=0; _i< this.nCols;_i++) 
            this.Cols.push(new DynGridCol());

        for (_i=0; _i< this.nRows;_i++) 
            this.Rows.push(new DynGridRow(_i));
    }

    /*
       Put a className attribute on a node 
       node - Input node 
       suffix - Suffix to append to the instance className 
     */
    this.putClass=function (node, suffix){
        var className=this.className || "";
        if (suffix)
            className+=suffix;

        if (className)
            node.className=className;
    }

    /* 
       Shows/Hides a list of columns 
       colList - List of columns separated by ';'. Leftest column is number 0. 
       on_off - true to show the columns, false to hide the columns 
     */
    this.showCol=function(colList, on_off) {
        var _vCol = colList.split(";");
        var _displayValue = on_off ? "" : "none";
        var _row = null;
        var _n=0;

        for (var _i=0; _i < this.nRows + 2; _i++) {
            _row=this.tableDocument.rows[_i];
            for (var _j=0; _j < _vCol.length; _j++) {
                _n = _vCol[_j];
                _row.cells[_n].style.display = _displayValue;
            }
        }
    }


    /* 
       Shows/Hides a row 
       row - Row number. First row is number 0. 
       on_off - true to show the row, false to hide the row 
     */
    this.showRow=function(row, on_off) {
        var _displayValue = on_off ? "" : "none";
        var _row = null;

        _row=this.tableDocument.rows[row];
        _row.style.display = _displayValue;
    }

    /*
       Calculates the Even/Odd attribute for all the rows. If the attribute has changed, the class is set for all the cells in the row
     */
    this.calculateEvenOdd=function() {
        var _even=true;
        var _row=null;
        var _className='';

        for (var _i=0; _i < this.nRows; _i++) {
            if (!this.Rows[_i].Filtered) {
                _even=!_even;
                if (_even != this.Rows[_i].Even) {
                    this.Rows[_i].Even=_even;
                    if (_even) 
                        _className='Even';
                    else
                        _className='Odd';
                    _row = this.tableDocument.rows[_i + 1];
                    for (var _j=0; _j < this.nCols; _j++)
                        this.putClass(_row.cells[_j], _className);
                }
            }
        }
    }

    /* ******************************************
       'SORT' funcionality
     ****************************************** */

    /*
       Sorts the table by a column 
       col - Column to sort by. Leftest column is number 0
     */
    this.orderByCol=function(col) {
        var _compFunction = this.Cols[col].CompareFunction;
		//alert("orderByCol(" + col + ")");
		//alert("_compFunction = " + _compFunction);
		var _value1 = null;
        var _i=0;
        var _j=0;
        var _k=0;
        var _media=0;
        var _resutl=0;
        var _dynrow=null;

        for (_i=1; _i < this.nRows; _i++){
            _value1 = this.tableDocument.tBodies[0].rows[_i + 1].cells[col].innerText;
            _j = 0;
            _k = _i;
            while ( _j < _k ) {
                _media = (_j + _k) / 2;
                _media = parseInt(_media);
                _value2 = this.tableDocument.tBodies[0].rows[_media + 1].cells[col].innerText;
                _result = _compFunction(_value1, _value2, this.numberSeparator) * this.Cols[col].SortDirection;
				if (_result > 0)
                    _j = _media + 1;
                else
                    _k = _media;

                if (_result == 0)
                    _j = _k;
            } // while
            if (_i != _j) {
                this.tableDocument.tBodies[0].insertRow(_j + 1);
                this.tableDocument.tBodies[0].replaceChild(this.tableDocument.tBodies[0].rows[_i + 2], this.tableDocument.tBodies[0].rows[_j + 1]);

                _dynrow= this.Rows[_i];
                this.Rows.splice(_i, 1);
                this.Rows.splice(_j,0,_dynrow);
            }
        } // for _i

        if (this.Cols[col].SortDirection == 1) 
            this.Cols[col].SortDirection = -1;
        else
            this.Cols[col].SortDirection = 1;

        this.calculateEvenOdd();
        if (this.Scroll) 
            this.setFirstPage();
        else
            this.hideRepValues();

    }

    /*
       Compares two numeric values. 
       a - First Value to compare 
       b - Second Value to compare 
       separator - Regular expression used to remove language dependent chars in a masked number 
       - returns - 0 if a==b; <0 if a<b; >0 if a>b. Returns 1 if error. 
     */
    this.compareNUMBER=function(a, b, separator){
        var _a = a.replace(separator,"");
        var _b = b.replace(separator,"");
        try{
            return _a - _b;
        }catch(e){
            return 1;
        }
    }

    /*
       Compares two date values. 
       a - First Value to compare 
       b - Second Value to compare 
       returns - 0 if a==b; <0 if a<b; >0 if a>b.Returns 1 if error. 
     */
	
	//CAC 29-04-2016---------------------------------------INI
	/*this.compareDATE=function(a, b){
        try{
            var _a = new Date (a);
            var _b = new Date (b);
            return _a.getTime() - _b.getTime();
        }catch(e){
            return 1;
        }
    }
	*/

	this.compareDATE=function(a, b){
		try{
			var rx = /(\d+)\/(\d+)\/(\d+)/;
			var _a = Number(a.replace(rx, '$3$2$1'));
			var _b = Number(b.replace(rx, '$3$2$1'));
			return _a > _b ? -1 : _a < _b ? 1 : 0;
        }catch(e){
            return 1;
        }
    }
	//CAC 29-04-2016---------------------------------------FIN	

    /*
       Compares two text values. 
       a - First Value to compare 
       b - Second Value to compare 
       returns - 0 if a==b; <0 if a<b; >0 if a>b. 
     */
    this.compareTEXT=function(a,b){
        var _a = a.toUpperCase();
        var _b = b.toUpperCase();

        return (_a == _b)
            ? 0
            : ((_a < _b) ? -1 : 1);
    }

    /*
       Sets the function used to sort by the column 
       col - Column number. Leftest column is number 0. 
       compare - Compare Function. Must be a value defined by DynGrid.prototype.SORT_TYPE 
     */
    this.setCompareFunction=function(col, compare)
    {
        switch (compare)
        {
			case DynGrid.prototype.SORT_TYPE.TEXT:
				this.Cols[col].CompareFunction = this.compareTEXT;
				break;
			case DynGrid.prototype.SORT_TYPE.DATE:
				this.Cols[col].CompareFunction = this.compareDATE;
				break;
            case DynGrid.prototype.SORT_TYPE.NUMBER:
                this.Cols[col].CompareFunction = this.compareNUMBER;
                break;
            default:
                this.Cols[col].CompareFunction = this.compareTEXT;
        }
    }


    /* 
       Enables 'Sort by' in a list of columns 
       colList - List of columns separated by ';'. Leftest column is number 0. 
     */
    this.defineSortCols=function(colList) {
	//alert(1);
	//alert(colList);
        var _vCol = colList.split(";");
        var _header = this.tableDocument.rows[0].cells;
        var _n = 0;
		var _compare = 0;
		var _cadena = null; //CAC 29-04-2016
		
		for (var _i=0; _i < _vCol.length; _i++) {
            _n = _vCol[_i]; ;
            if (_n < this.nCols) {
                this.Cols[_n].Sort=true;
				
				//CAC 29-04-2016-------------------------------------------------------INI
				//this.Cols[_n].CompareFunction = this.compareTEXT; Se comenta porque por defecto tomaba todas las columnas como TEXTO.
				_cadena = this.tableDocument.tBodies[0].rows[1].cells[_n].innerText;	
				
				try{
					var _number = _cadena.parseInt();
					_compare = 2; 
				}catch(e){
					if (_cadena.indexOf('/') == 2)
						_compare = 1;
					else
						_compare = 0;
					;
				}
			
				this.setCompareFunction(_n , _compare );
				//CAC 29-04-2016-------------------------------------------------------FIN
				
                _header[_n].onclick = new Function ("DynGrid.prototype.autoStore[" + this.nAutoStore + "].orderByCol(" + _n + ")");
                if (!this.Cols[_n].Filter) 
		    //alert(10);
                    this.putClass(_header[_n], 'Sort');
                else 
		    //alert(11);	
                    this.putClass(_header[_n], 'SortFilter');
            }
        }
    }

    /* ******************************************
       'TOTAL' funcionality
     ****************************************** */

    /* Calculates and shows the total value for a column 
       col - Column to totalize 
     */
    this.calculateTotal=function(col) {
        var _row = null;
        var _cell = null;
        var _value = 0;
        var _sign = 1;

        this.Cols[col].TotalAmmount=0;
        for (var _i=0; _i < this.nRows ; _i++) {
            if (!this.Rows[_i].Filtered) {
                _row=this.tableDocument.rows[_i+1];
                _cell=_row.cells[col].innerText;
                _value = _cell.replace(this.numberSeparator,"");
                if (_value.match(this.numberSign)) {
                    _value = _value.replace(this.numberSign,"");
                    _sign = -1;
                }
                else
                    _sign = 1;
                _value = parseFloat(_value);
                if (isNaN(_value)) 
                    _value = 0;
                this.Cols[col].TotalAmmount+=(_value*_sign);
            }
        }
        _row=this.tableDocument.rows[_i+1]; // Foot;

        this.Cols[col].TotalAmmount= Math.round(this.Cols[col].TotalAmmount * 100) / 100;
        _row.cells[col].innerText=this.Cols[col].TotalAmmount;
        this.putClass(_row.cells[col], 'Total');
    }
    /* 
       Recalculates all columns totals 
     */
    this.calculateAllTotalCols=function() {
        if (!this.Totals)
            return;

        for (var _i=0; _i < this.nCols; _i++) 
            if (this.Cols[_i].Total)
                this.calculateTotal(_i);
    }

    /* 
       Enables 'Totals' for a list of columns 
       colList - List of columns separated by ';'. Leftest column is number 0. 
     */
    this.defineTotalCols=function(colList) {
        var _vCol = colList.split(";");
        var _n = 0;

        for (var _i=0; _i < _vCol.length; _i++) {
            _n = _vCol[_i]; ;
            if (_n < this.nCols) {
                this.Totals = true;
                this.Cols[_n].Total=true;
                this.calculateTotal(_n);
            }
        }

    }

    /* ******************************************
       'SUPRESS REPEATING VALUES' funcionality
     ****************************************** */

    /* 
       Hide cells (for the current page) depending on the 'Supress Repeating Values' 
     */
    this.hideRepValues=function() {
        var _prevrow = null;
        var _row = null;
        var _prevdata = '';
        var _data = '';
        var _different = false;

        if (!this.SupressRepeatingValue) 
            return;

        // First row in page must be complete
        _prevrow = this.tableDocument.rows[this.firstRowOnPage + 1];
        for (var _j=0; _j < this.nCols; _j++) {
            _prevrow.cells[_j].style.visibility="visible";
            _prevrow.cells[_j].style.borderTop="solid 1px";
        }
        // Looks for repeating values on next rows
        for (var _i=this.firstRowOnPage + 1; _i < this.lastRowOnPage + 1; _i++) {
            if (!this.Rows[_i].Filtered) {
                _row=this.tableDocument.rows[_i + 1];
                for (var _j=0; _j < this.nCols; _j++) {
                    if (!_different){
                        if (this.Cols[_j].SuppressRep) {
                            _prevdata += _prevrow.cells[_j].innerText;
                            _data += _row.cells[_j].innerText;
                            if (_prevdata == _data) {
                                _row.cells[_j].style.visibility="hidden";
                                _row.cells[_j].style.borderTop="";
                            }
                            else {
                                _row.cells[_j].style.visibility="visible";
                                _row.cells[_j].style.borderTop="solid 1px";
                                _different=true; // Fin bucle.
                            }
                        }
                    }
                    else {
                        _row.cells[_j].style.visibility="visible";
                        _row.cells[_j].style.borderTop="solid 1px";
                    }
                }
                _prevrow = _row;
                _prevdata = '';
                _data = '';
                _different = false;
            }
        }
    }

    /* 
       Enables 'Suppress Repeating Values' for a list of columns 
       colList - List of columns separated by ';'. Leftest column is number 0. 
       redraw - true to 'redraw' the table, false otherwise 
     */
    this.defineSuppRepCols=function(colList, redraw) {
        var _vCol = colList.split(";");
        var _n = 0;

        for (var _i=0; _i < _vCol.length; _i++) {
            _n = _vCol[_i]; ;
            if (_n < this.nCols) {
                this.SupressRepeatingValue = true;
                this.Cols[_n].SuppressRep=true;
            }
        }

        if (redraw)
            this.hideRepValues();

    }

    /* ******************************************
       'PAGING' funcionality
     ****************************************** */

    /*
       Scrolls Down 'n' rows. 
       scrollRows - Number of rows to scroll 
     */
    this.scrollDown=function(scrollRows){
        var _currentRow = this.lastRowOnPage + 1;
        var _nRowsToScroll = 0;

        // Shows bottom rows
        while ((_currentRow < this.nRows) && (_nRowsToScroll < scrollRows)) {
            if (!this.Rows[_currentRow].Filtered) {
                _nRowsToScroll++;
                this.showRow(_currentRow + 1, true);
                this.lastRowOnPage = _currentRow;
            }
            _currentRow++;
        }

        // Hides Top rows
        if (_nRowsToScroll > 0) {
            while (_nRowsToScroll > 0) {
                if (!this.Rows[this.firstRowOnPage].Filtered) {
                    this.showRow(this.firstRowOnPage + 1, false);
                    _nRowsToScroll--;
                }
                this.firstRowOnPage++;
            }

            this.hideRepValues();
        }
    }

    /*
       Scrolls Up 'n' rows. 
       scrollRows - Number of rows to scroll 
     */
    this.scrollUp=function(scrollRows){
        var _currentRow = this.firstRowOnPage - 1;
        var _nRowsToScroll = 0;

        // Shows top rows
        while ((_currentRow > -1) && (_nRowsToScroll < scrollRows)) {
            if (!this.Rows[_currentRow].Filtered) {
                _nRowsToScroll++;
                this.showRow(_currentRow + 1, true);
                this.firstRowOnPage = _currentRow;
            }
            _currentRow--;
        }

        // Hides bottom rows
        if (_nRowsToScroll > 0) {
            while (_nRowsToScroll > 0) {
                if (!this.Rows[this.lastRowOnPage].Filtered) {
                    this.showRow(this.lastRowOnPage + 1, false);
                    _nRowsToScroll--;
                }
                this.lastRowOnPage--;
            }

            this.hideRepValues();
        }
    }

    /*
       Shows/Hides the scroll bars. 
       on_off - true to show the scroll bars, false to hide the scroll bars 
     */
    this.showScrollBars=function(on_off) {
        var _displayValue = on_off ? "" : "none";
        var _row = null;

        _row=this.tableDocument.rows[0];
        _row.cells[this.nCols].style.display = _displayValue;

        _row=this.tableDocument.rows[this.nRows + 1];
        _row.cells[this.nCols].style.display = _displayValue;

        this.showRow(this.nRows + 2, on_off);
    }

    /*
       Adds scroll bars to the table. Adds a cell at the end of the 'head' and 'foot' rows for the 'one row scroll'. Adds a new roll for the 'one page scroll' 
     */
    this.buildScrollBars=function() {
        var _row=null;
        var _cell=null;
        var _img=null;
        var _last=0;

        this.ScrollBars=true;

        // Row Up
        _img = this.doc.createElement('IMG');
        _img.src='templates/images/gadgetTop.gif';
        _img.alt=(language == 'es') ?  'Registro anterior' : 'Record Up';
        _img.width=11;
        _img.height=11;
        _img.onclick = new Function ("DynGrid.prototype.autoStore[" + this.nAutoStore + "].scrollUp(1)");
        _cell = this.doc.createElement('TH');
        this.putClass(_cell, 'Head');
        _cell.width=13;
        _cell.appendChild(_img);
        _row = this.tableDocument.rows[0];
        _row.appendChild(_cell);

        // Row Down
        _img = this.doc.createElement('IMG');
        _img.src='templates/images/gadgetBottom.gif';
        _img.alt=(language == 'es') ?  'Registro siguiente' : 'Record down';
        _img.width=11;
        _img.height=11;
        _img.onclick = new Function ("DynGrid.prototype.autoStore[" + this.nAutoStore + "].scrollDown(1)");
        _cell = this.doc.createElement('TD');
        //        this.putClass(_cell, '');
        _cell.width=13;
        _cell.appendChild(_img);
        _last = this.nRows + 1;
        _row = this.tableDocument.rows[_last];
        _row.appendChild(_cell);

        // Page Up
        _img = this.doc.createElement('IMG');
        _img.src='templates/images/gadgetLeftPage.gif';
        _img.alt=(language == 'es') ?  'P\E1gina anterior' : 'Page up';
        _img.width=11;
        _img.height=11;
        _img.onclick = new Function ("DynGrid.prototype.autoStore[" + this.nAutoStore + "].scrollUp(" + this.rowsToScroll + ")");
        _cell = this.doc.createElement('TD');
        this.putClass(_cell, "Scroll");
        _cell.align="right";
        _cell.colSpan=this.nCols;
        _cell.appendChild(_img);

        // Page Down
        _img = this.doc.createElement('IMG');
        _img.src='templates/images/gadgetRightPage.gif';
        _img.alt=(language == 'es') ?  'P\E1gina siguiente' : 'Page down';
        _img.width=11;
        _img.height=11;
        _img.onclick = new Function ("DynGrid.prototype.autoStore[" + this.nAutoStore + "].scrollDown(" + this.rowsToScroll + ")");
        _cell.appendChild(_img);

        // Creates Row for page up and down
        _row = this.doc.createElement('TR');
        _row.appendChild(_cell);
        _cell = this.doc.createElement('TD');
        this.putClass(_cell, "Scroll");
        _cell.innerText="";
        _row.appendChild(_cell);
        this.tableDocument.tBodies[0].appendChild(_row);
    }

    /*
       Scrolls to the first page. Shows/Hides the scroll bars depending on then number of visible rows 
     */
    this.setFirstPage=function() {
        if (!this.Scroll) return;

        var _visibleRows = this.nRows - this.filterRows;

        if (_visibleRows > this.rowsPerPage) {
            if (!this.ScrollBars) 
                this.buildScrollBars();
            else 
                this.showScrollBars(true);
        }
        else  // No scroll bars
            if (this.ScrollBars) 
                this.showScrollBars(false);

        this.firstRowOnPage = 0;
        this.lastRowOnPage = 0;
        var _first=false;
        var _last=false;
        var _valid=0;
        for (var _i=0; _i < this.nRows; _i++) {
            if (!this.Rows[_i].Filtered) {
                if (!_first) {
                    this.firstRowOnPage = _i;
                    _first = true;
                }
                _valid++;
                if (_valid > this.rowsPerPage) {
                    _last = true;
                    this.showRow(_i + 1, false);
                }
                else 
                    this.showRow(_i + 1, true);

                if (!_last) 
                    this.lastRowOnPage = _i;
            }
        }

        this.hideRepValues();

    }

    /* 
       Enables 'Paging' on the table. 
       nRows - Number of rows in a page 
       scrollSize - Number of rows to scroll when user scrolls one page 
     */
    this.definePageSize=function(nRows,scrollSize) {

        this.Scroll = true;
        this.rowsPerPage = nRows;
        this.rowsToScroll = scrollSize;

        this.setFirstPage()
    }

    /* ******************************************
       'FILTER' funcionality
     ****************************************** */

    /*
       Displays the menu with the valid values to filter by a column 
       event - Event object created by the rightbuttonclicked. 
       col - Column to filter by. Leftest column is number 0. 
     */
    function deMayorAMenor(elem1, elem2) {return elem2-elem1;}
    this.createFilterMenu=function(event, col) {

        // Builds a div for the menu
        this.filterMenu = this.doc.createElement('DIV');
        this.doc.body.appendChild(this.filterMenu);
        this.filterMenu.onmouseleave = new Function ("DynGrid.prototype.autoStore[" + this.nAutoStore + "].filterMenu.removeNode(true)");
        this.putClass(this.filterMenu, 'FilterMenu');
        this.filterMenu.style.position="absolute";
        this.filterMenu.style.zIndex=10;
        event = event || window.event;
        this.filterMenu.style.left = event.clientX + this.doc.documentElement.scrollLeft - 5;
        this.filterMenu.style.top = event.clientY + this.doc.documentElement.scrollTop - 5;

        var _table = this.doc.createElement('TABLE');
        this.filterMenu.appendChild(_table);
        this.putClass(_table, 'FilterMenu');

        // Gets the Cols values
        var _row = null;
        var _value = null;
        var _list = new Array();
	var iperiodo = 0;


        for (var _i=0; _i < this.nRows; _i++) {
	    // alert(10);
            _row = this.tableDocument.rows[_i + 1];
            _value = _row.cells[col].innerText;
	    if (_i==0){
		    if (!isNaN(_value)){
			    iperiodo = 1
		    }
	    }

            //  alert(_value )
            if (_value) {
                _list.push(_value);
            }
        }
	if (iperiodo	 == 1){
		_list.sort(deMayorAMenor);
	}
	else{
		_list.sort();
	}
        //_list.sort(deMayorAMenor);
	//_list.reverse();


        // Builds a table with the list of values

        var _cell = _table.insertRow().insertCell(); // Adds the 'All' value
        var _anchor = this.doc.createElement('A');
        _anchor.href = '#';
        _anchor.appendChild(this.doc.createTextNode(DynGrid.prototype.FILTER_LABEL));
        this.putClass(_anchor, 'FilterMenu');
        _cell.appendChild(_anchor);
        _cell.onclick = new Function ("DynGrid.prototype.autoStore[" + this.nAutoStore + "].filterByCol(" + col + ", '" + DynGrid.prototype.FILTER_LABEL + "')");

        for (var _i=0; _i < _list.length; _i++) { // Adds the rest of values
	   // alert(10);		
            if ((_i == 0) || (_list[_i] != _list[_i-1])) {
	        //alert(_list[_i]);
                var _cell = _table.insertRow().insertCell();
                var _anchor = this.doc.createElement('A');
                _anchor.href = '#';
                _anchor.appendChild(this.doc.createTextNode(_list[_i]));
                this.putClass(_anchor, 'FilterMenu');
                _cell.appendChild(_anchor);
                _cell.onclick = new Function ("DynGrid.prototype.autoStore[" + this.nAutoStore + "].filterByCol(" + col + ", '" + _list[_i] + "')");
            }
        } 

        return false;
    }

    /*
       Filters the table by a column value 
       col - Column to filter by. Leftest column is number 0. 
       filterValue - Value used to filter 
     */
    this.filterByCol=function(col, filterValue) {
        var _row = null;
        var _value = null;

        this.filterRows=0;

        for (var _i=0; _i < this.nRows; _i++) {
            _row = this.tableDocument.rows[_i + 1];
            _value = _row.cells[col].innerText;
            if ((_value == filterValue) || (filterValue == DynGrid.prototype.FILTER_LABEL)) {
                this.Rows[_i].Filtered = false;
                this.showRow(_i + 1, true);
            }
            else {
                this.filterRows++;
                this.Rows[_i].Filtered = true;
                this.showRow(_i + 1, false);
            }
        }

        this.calculateEvenOdd();

        if (this.Scroll) 
            this.setFirstPage();
        else
            this.hideRepValues();

        this.calculateAllTotalCols();

    }
    /* 
       Enables 'Autofilter' in a list of columns 
       colList - List of columns separated by ';'. Leftest column is number 0. 
     */
    this.defineFilterCols=function(colList) {
	//alert(0);
	//alert(colList);
        var _vCol = colList.split(";");
        var _header = this.tableDocument.rows[0].cells;
        var _n = 0;

        for (var _i=0; _i < _vCol.length; _i++) {
            _n = _vCol[_i]; ;
            if (_n < this.nCols) {
                this.Filter=true;
                this.Cols[_n].Filter=true;
		//                _header[_n].oncontextmenu = new Function ("event", "return DynGrid.prototype.autoStore[" + this.nAutoStore + "].createFilterMenu(event, " + _n + ")");
                _header[_n].oncontextmenu = new Function ("event", "return DynGrid.prototype.autoStore[" + this.nAutoStore + "].createFilterMenu(event, " + _n + ")");
                if (!this.Cols[_n].Sort) 
		    //alert(10);	
                    this.putClass(_header[_n], 'Filter');
                else 
    		    //alert(11);	
                    this.putClass(_header[_n], 'SortFilter');
            }
        }
    }

    /* ******************************************
       'INITIALIZATIONS'
     ****************************************** */

    this.language = language;
    this.numberSeparator = (language == 'es') ?  /,/g : /,/g;
    this.numberSign = /CR|-/gi;

    this.className = className ? className : 'grid';
    this.doc = win.document;                                   // HTML Doc
    this.tableDocument=this.doc.getElementById(name); // Table Doc

    this.nCols = 0;             // Number of columns
    this.Cols = new Array();    // Data column definition
    this.nRows = 0;             // Number of rows (head, foot not included)
    this.Rows = new Array();    // Data rows definition

    this.Totals = false;                    // True if there is any column with 'total' enabled
    this.Filter = false;                    // True if there is any column with 'filter' enabled
    this.filterRows = 0;                    // Number of rows currenty filtered
    this.SupressRepeatingValue = false;     // True if there is any column with 'supress repeating value' enabled

    this.Scroll = false;        // True if 'Scroll' enabled
    this.ScrollBars = false;    // True if the scroll bars has been created
    this.rowsPerPage = 0;       // Rows per page
    this.rowsToScroll = 0;      // Number of rows to scroll when user scrolls a 'page'

    this.nRows=this.tableDocument.rows.length - 2;  // Number of Rows on table Body
    this.firstRowOnPage = 0;            // First Visible Row in page
    this.lastRowOnPage=this.nRows - 1;  // Last Visible Row in page

    this.initializeRowsAndCols();   // Gets row and col info 
}
